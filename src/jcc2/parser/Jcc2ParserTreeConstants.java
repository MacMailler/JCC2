/* Generated By:JavaCC: Do not edit this line. Jcc2ParserTreeConstants.java Version 4.2 */
package jcc2.parser;

public interface Jcc2ParserTreeConstants
{
  public int JJTSINGLEID = 0;
  public int JJTVOID = 1;
  public int JJTVOIDNODE = 2;
  public int JJTTYPE = 3;
  public int JJTPRIMITIVETYPE = 4;
  public int JJTBOOLNODE = 5;
  public int JJTCHARNODE = 6;
  public int JJTBYTENODE = 7;
  public int JJTSHORTNODE = 8;
  public int JJTINTNODE = 9;
  public int JJTLONGNODE = 10;
  public int JJTFLOATNODE = 11;
  public int JJTDOUBLENODE = 12;
  public int JJTSTRINGNODE = 13;
  public int JJTCOMPLEXID = 14;
  public int JJTCOMPILATIONUNIT = 15;
  public int JJTUSE = 16;
  public int JJTFIELDDECLARATION = 17;
  public int JJTVARIABLEDECLARATOR = 18;
  public int JJTARRAYINITIALIZER = 19;
  public int JJTMETHODDECLARATION = 20;
  public int JJTMETHODDECLARATOR = 21;
  public int JJTFORMALPARAMETERS = 22;
  public int JJTFORMALPARAMETER = 23;
  public int JJTASSIGNNODE = 24;
  public int JJTASSIGN = 25;
  public int JJTMULASSIGN = 26;
  public int JJTDIVASSIGN = 27;
  public int JJTREMASSIGN = 28;
  public int JJTPLUSASSIGN = 29;
  public int JJTMINUSASSIGN = 30;
  public int JJTLSHIFTASSIGN = 31;
  public int JJTRSIGNEDSHIFTASSIGN = 32;
  public int JJTRUNSIGNEDSHIFTASSIGN = 33;
  public int JJTANDASSIGN = 34;
  public int JJTXORASSIGN = 35;
  public int JJTORASSIGN = 36;
  public int JJTCONDITIONALEXPRESSIONNODE = 37;
  public int JJTORNODE = 38;
  public int JJTANDNODE = 39;
  public int JJTINCLUSIVEORNODE = 40;
  public int JJTEXCLUSIVEORNODE = 41;
  public int JJTBITANDNODE = 42;
  public int JJTEQUALS = 43;
  public int JJTNOTEQUALS = 44;
  public int JJTEQUALITYNODE = 45;
  public int JJTINSTANCEOFNODE = 46;
  public int JJTEQUALSNODE = 47;
  public int JJTLESS = 48;
  public int JJTGREATER = 49;
  public int JJTLESSEQUAL = 50;
  public int JJTGREATEREQUAL = 51;
  public int JJTRELATIONALNODE = 52;
  public int JJTLSHIFT = 53;
  public int JJTRSHIFT = 54;
  public int JJTRUSHIFT = 55;
  public int JJTSHIFTNODE = 56;
  public int JJTPLUS = 57;
  public int JJTMINUS = 58;
  public int JJTADDITIVENODE = 59;
  public int JJTMUL = 60;
  public int JJTDIV = 61;
  public int JJTREM = 62;
  public int JJTMULTIPLICATIVENODE = 63;
  public int JJTUNARYMINUS = 64;
  public int JJTPREINCREMENTEXPRESSION = 65;
  public int JJTPREDECREMENTEXPRESSION = 66;
  public int JJTTILDA = 67;
  public int JJTNOT = 68;
  public int JJTNOTNODE = 69;
  public int JJTCASTLOOKAHEAD = 70;
  public int JJTPLUSPLUS = 71;
  public int JJTMINUSMINUS = 72;
  public int JJTPOSTFIXNODE = 73;
  public int JJTELEMENTACCESSNODE = 74;
  public int JJTMEMBERACCESSNODE = 75;
  public int JJTCASTEXPRESSION = 76;
  public int JJTCALLNODE = 77;
  public int JJTINTLITERAL = 78;
  public int JJTFLOATLITERAL = 79;
  public int JJTCHARLITERAL = 80;
  public int JJTSTRINGLITERAL = 81;
  public int JJTNULL = 82;
  public int JJTBOOLEANLITERAL = 83;
  public int JJTTRUE = 84;
  public int JJTFALSE = 85;
  public int JJTARGUMENTS = 86;
  public int JJTNEWARRAY = 87;
  public int JJTCONSTRUCTOR = 88;
  public int JJTARRAYDIMSANDINITS = 89;
  public int JJTBLOCK = 90;
  public int JJTSTATEMENTEXPRESSION = 91;
  public int JJTIFSTATEMENT = 92;
  public int JJTWHILESTATEMENT = 93;
  public int JJTDOSTATEMENT = 94;
  public int JJTFORSTATEMENT = 95;
  public int JJTSTATEMENTEXPRESSIONLIST = 96;
  public int JJTBREAKSTATEMENT = 97;
  public int JJTCONTINUESTATEMENT = 98;
  public int JJTRETURNSTATEMENT = 99;


  public String[] jjtNodeName = {
    "SingleId",
    "void",
    "VoidNode",
    "Type",
    "PrimitiveType",
    "BoolNode",
    "CharNode",
    "ByteNode",
    "ShortNode",
    "IntNode",
    "LongNode",
    "FloatNode",
    "DoubleNode",
    "StringNode",
    "ComplexId",
    "CompilationUnit",
    "Use",
    "FieldDeclaration",
    "VariableDeclarator",
    "ArrayInitializer",
    "MethodDeclaration",
    "MethodDeclarator",
    "FormalParameters",
    "FormalParameter",
    "AssignNode",
    "Assign",
    "MulAssign",
    "DivAssign",
    "RemAssign",
    "PlusAssign",
    "MinusAssign",
    "LShiftAssign",
    "RSignedShiftAssign",
    "RUnsignedShiftAssign",
    "AndAssign",
    "XorAssign",
    "OrAssign",
    "ConditionalExpressionNode",
    "OrNode",
    "AndNode",
    "InclusiveOrNode",
    "ExclusiveOrNode",
    "BitAndNode",
    "Equals",
    "NotEquals",
    "EqualityNode",
    "InstanceOfNode",
    "EqualsNode",
    "Less",
    "Greater",
    "LessEqual",
    "GreaterEqual",
    "RelationalNode",
    "LShift",
    "RShift",
    "RUShift",
    "ShiftNode",
    "Plus",
    "Minus",
    "AdditiveNode",
    "Mul",
    "Div",
    "Rem",
    "MultiplicativeNode",
    "UnaryMinus",
    "PreIncrementExpression",
    "PreDecrementExpression",
    "Tilda",
    "Not",
    "NotNode",
    "CastLookahead",
    "PlusPlus",
    "MinusMinus",
    "PostfixNode",
    "ElementAccessNode",
    "MemberAccessNode",
    "CastExpression",
    "CallNode",
    "IntLiteral",
    "FloatLiteral",
    "CharLiteral",
    "StringLiteral",
    "Null",
    "BooleanLiteral",
    "True",
    "False",
    "Arguments",
    "NewArray",
    "Constructor",
    "ArrayDimsAndInits",
    "Block",
    "StatementExpression",
    "IfStatement",
    "WhileStatement",
    "DoStatement",
    "ForStatement",
    "StatementExpressionList",
    "BreakStatement",
    "ContinueStatement",
    "ReturnStatement",
  };
}
/* JavaCC - OriginalChecksum=d13bd96b12de1d5adcf5e784a52da497 (do not edit this line) */
