/* Generated By:JJTree&JavaCC: Do not edit this line. Jcc2Parser.java */
package jcc2.parser;

public class Jcc2Parser/*@bgen(jjtree)*/implements Jcc2ParserTreeConstants, Jcc2ParserConstants {/*@bgen(jjtree)*/
  protected JJTJcc2ParserState jjtree = new JJTJcc2ParserState();

/*
 * Program structuring syntax follows.
 */
  final public void SingleId() throws ParseException {
 /*@bgen(jjtree) SingleId */
  ASTSingleId jjtn000 = new ASTSingleId(JJTSINGLEID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.jjtSetLastToken(getToken(0));
                  jjtn000.str = t.image;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ResultType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
    ASTVoidNode jjtn001 = new ASTVoidNode(JJTVOIDNODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(VOID);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtn001.jjtSetLastToken(getToken(0));
    }
      }
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case STRING:
    case IDENTIFIER:
      Type();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Type() throws ParseException {
 /*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case STRING:
        PrimitiveType();
        break;
      case IDENTIFIER:
        ComplexId();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                                               jjtn000.num++;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PrimitiveType() throws ParseException {
 /*@bgen(jjtree) PrimitiveType */
  ASTPrimitiveType jjtn000 = new ASTPrimitiveType(JJTPRIMITIVETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
    ASTBoolNode jjtn001 = new ASTBoolNode(JJTBOOLNODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(BOOLEAN);
        } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtn001.jjtSetLastToken(getToken(0));
    }
        }
        break;
      case CHAR:
    ASTCharNode jjtn002 = new ASTCharNode(JJTCHARNODE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(CHAR);
        } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      jjtn002.jjtSetLastToken(getToken(0));
    }
        }
        break;
      case BYTE:
    ASTByteNode jjtn003 = new ASTByteNode(JJTBYTENODE);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
    jjtn003.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(BYTE);
        } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
      jjtn003.jjtSetLastToken(getToken(0));
    }
        }
        break;
      case SHORT:
    ASTShortNode jjtn004 = new ASTShortNode(JJTSHORTNODE);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
    jjtn004.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(SHORT);
        } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
      jjtn004.jjtSetLastToken(getToken(0));
    }
        }
        break;
      case INT:
    ASTIntNode jjtn005 = new ASTIntNode(JJTINTNODE);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
    jjtn005.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(INT);
        } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
      jjtn005.jjtSetLastToken(getToken(0));
    }
        }
        break;
      case LONG:
    ASTLongNode jjtn006 = new ASTLongNode(JJTLONGNODE);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
    jjtn006.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(LONG);
        } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006, true);
      jjtn006.jjtSetLastToken(getToken(0));
    }
        }
        break;
      case FLOAT:
    ASTFloatNode jjtn007 = new ASTFloatNode(JJTFLOATNODE);
    boolean jjtc007 = true;
    jjtree.openNodeScope(jjtn007);
    jjtn007.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(FLOAT);
        } finally {
    if (jjtc007) {
      jjtree.closeNodeScope(jjtn007, true);
      jjtn007.jjtSetLastToken(getToken(0));
    }
        }
        break;
      case DOUBLE:
    ASTDoubleNode jjtn008 = new ASTDoubleNode(JJTDOUBLENODE);
    boolean jjtc008 = true;
    jjtree.openNodeScope(jjtn008);
    jjtn008.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(DOUBLE);
        } finally {
    if (jjtc008) {
      jjtree.closeNodeScope(jjtn008, true);
      jjtn008.jjtSetLastToken(getToken(0));
    }
        }
        break;
      case STRING:
    ASTStringNode jjtn009 = new ASTStringNode(JJTSTRINGNODE);
    boolean jjtc009 = true;
    jjtree.openNodeScope(jjtn009);
    jjtn009.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(STRING);
        } finally {
    if (jjtc009) {
      jjtree.closeNodeScope(jjtn009, true);
      jjtn009.jjtSetLastToken(getToken(0));
    }
        }
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ComplexId() throws ParseException {
 /*@bgen(jjtree) ComplexId */
  ASTComplexId jjtn000 = new ASTComplexId(JJTCOMPLEXID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      SingleId();
      label_2:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_2;
        }
        jj_consume_token(DOT);
        SingleId();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public ASTCompilationUnit CompilationUnit() throws ParseException {
 /*@bgen(jjtree) CompilationUnit */
  ASTCompilationUnit jjtn000 = new ASTCompilationUnit(JJTCOMPILATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case USE:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case STRING:
        case VOID:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case USE:
          Use();
          break;
        default:
          jj_la1[5] = jj_gen;
          if (jj_2_2(2147483647)) {
            MethodDeclaration();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case STRING:
            case IDENTIFIER:
              FieldDeclaration();
              jj_consume_token(SEMICOLON);
              break;
            default:
              jj_la1[6] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
      jj_consume_token(0);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.jjtSetLastToken(getToken(0));
     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Use() throws ParseException {
 /*@bgen(jjtree) Use */
  ASTUse jjtn000 = new ASTUse(JJTUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(USE);
      SingleId();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void FieldDeclaration() throws ParseException {
 /*@bgen(jjtree) FieldDeclaration */
  ASTFieldDeclaration jjtn000 = new ASTFieldDeclaration(JJTFIELDDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Type();
      VariableDeclarator();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        VariableDeclarator();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void VariableDeclarator() throws ParseException {
 /*@bgen(jjtree) VariableDeclarator */
  ASTVariableDeclarator jjtn000 = new ASTVariableDeclarator(JJTVARIABLEDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      SingleId();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        VariableInitializer();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void VariableInitializer() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      ArrayInitializer();
      break;
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case FALSE:
    case NEW:
    case NULL:
    case TRUE:
    case IDENTIFIER:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      Expression();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ArrayInitializer() throws ParseException {
 /*@bgen(jjtree) ArrayInitializer */
  ASTArrayInitializer jjtn000 = new ASTArrayInitializer(JJTARRAYINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACE:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case FALSE:
      case NEW:
      case NULL:
      case TRUE:
      case IDENTIFIER:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
        VariableInitializer();
        label_5:
        while (true) {
          if (jj_2_3(2)) {
            ;
          } else {
            break label_5;
          }
          jj_consume_token(COMMA);
          VariableInitializer();
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void MethodDeclaration() throws ParseException {
 /*@bgen(jjtree) MethodDeclaration */
  ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      ResultType();
      MethodDeclarator();
      Block();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void MethodDeclarator() throws ParseException {
 /*@bgen(jjtree) MethodDeclarator */
  ASTMethodDeclarator jjtn000 = new ASTMethodDeclarator(JJTMETHODDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      SingleId();
      FormalParameters();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void FormalParameters() throws ParseException {
 /*@bgen(jjtree) FormalParameters */
  ASTFormalParameters jjtn000 = new ASTFormalParameters(JJTFORMALPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case STRING:
      case IDENTIFIER:
        FormalParameter();
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_6;
          }
          jj_consume_token(COMMA);
          FormalParameter();
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void FormalParameter() throws ParseException {
 /*@bgen(jjtree) FormalParameter */
  ASTFormalParameter jjtn000 = new ASTFormalParameter(JJTFORMALPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Type();
      SingleId();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void Expression() throws ParseException {
    ConditionalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
    case PLUSASSIGN:
    case MINUSASSIGN:
    case STARASSIGN:
    case SLASHASSIGN:
    case ANDASSIGN:
    case ORASSIGN:
    case XORASSIGN:
    case REMASSIGN:
    case LSHIFTASSIGN:
    case RSIGNEDSHIFTASSIGN:
    case RUNSIGNEDSHIFTASSIGN:
      AssignmentOperator();
                           ASTAssignNode jjtn001 = new ASTAssignNode(JJTASSIGNNODE);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtn001.jjtSetFirstToken(getToken(1));
      try {
        Expression();
      } catch (Throwable jjte001) {
                           if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte001;}
                           }
                           if (jjte001 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte001;}
                           }
                           {if (true) throw (Error)jjte001;}
      } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  3);
                             jjtn001.jjtSetLastToken(getToken(0));
                           }
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  final public void AssignmentOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
    ASTAssign jjtn001 = new ASTAssign(JJTASSIGN);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(ASSIGN);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtn001.jjtSetLastToken(getToken(0));
    }
      }
      break;
    case STARASSIGN:
                  ASTMulAssign jjtn002 = new ASTMulAssign(JJTMULASSIGN);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                  jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(STARASSIGN);
      } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
      }
      break;
    case SLASHASSIGN:
                                    ASTDivAssign jjtn003 = new ASTDivAssign(JJTDIVASSIGN);
                                    boolean jjtc003 = true;
                                    jjtree.openNodeScope(jjtn003);
                                    jjtn003.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(SLASHASSIGN);
      } finally {
                                    if (jjtc003) {
                                      jjtree.closeNodeScope(jjtn003, true);
                                      jjtn003.jjtSetLastToken(getToken(0));
                                    }
      }
      break;
    case REMASSIGN:
                                                      ASTRemAssign jjtn004 = new ASTRemAssign(JJTREMASSIGN);
                                                      boolean jjtc004 = true;
                                                      jjtree.openNodeScope(jjtn004);
                                                      jjtn004.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(REMASSIGN);
      } finally {
                                                      if (jjtc004) {
                                                        jjtree.closeNodeScope(jjtn004, true);
                                                        jjtn004.jjtSetLastToken(getToken(0));
                                                      }
      }
      break;
    case PLUSASSIGN:
                                                                        ASTPlusAssign jjtn005 = new ASTPlusAssign(JJTPLUSASSIGN);
                                                                        boolean jjtc005 = true;
                                                                        jjtree.openNodeScope(jjtn005);
                                                                        jjtn005.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(PLUSASSIGN);
      } finally {
                                                                        if (jjtc005) {
                                                                          jjtree.closeNodeScope(jjtn005, true);
                                                                          jjtn005.jjtSetLastToken(getToken(0));
                                                                        }
      }
      break;
    case MINUSASSIGN:
                                                                                           ASTMinusAssign jjtn006 = new ASTMinusAssign(JJTMINUSASSIGN);
                                                                                           boolean jjtc006 = true;
                                                                                           jjtree.openNodeScope(jjtn006);
                                                                                           jjtn006.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(MINUSASSIGN);
      } finally {
                                                                                           if (jjtc006) {
                                                                                             jjtree.closeNodeScope(jjtn006, true);
                                                                                             jjtn006.jjtSetLastToken(getToken(0));
                                                                                           }
      }
      break;
    case LSHIFTASSIGN:
      ASTLShiftAssign jjtn007 = new ASTLShiftAssign(JJTLSHIFTASSIGN);
      boolean jjtc007 = true;
      jjtree.openNodeScope(jjtn007);
      jjtn007.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(LSHIFTASSIGN);
      } finally {
      if (jjtc007) {
        jjtree.closeNodeScope(jjtn007, true);
        jjtn007.jjtSetLastToken(getToken(0));
      }
      }
      break;
    case RSIGNEDSHIFTASSIGN:
                            ASTRSignedShiftAssign jjtn008 = new ASTRSignedShiftAssign(JJTRSIGNEDSHIFTASSIGN);
                            boolean jjtc008 = true;
                            jjtree.openNodeScope(jjtn008);
                            jjtn008.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(RSIGNEDSHIFTASSIGN);
      } finally {
                            if (jjtc008) {
                              jjtree.closeNodeScope(jjtn008, true);
                              jjtn008.jjtSetLastToken(getToken(0));
                            }
      }
      break;
    case RUNSIGNEDSHIFTASSIGN:
                                                        ASTRUnsignedShiftAssign jjtn009 = new ASTRUnsignedShiftAssign(JJTRUNSIGNEDSHIFTASSIGN);
                                                        boolean jjtc009 = true;
                                                        jjtree.openNodeScope(jjtn009);
                                                        jjtn009.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(RUNSIGNEDSHIFTASSIGN);
      } finally {
                                                        if (jjtc009) {
                                                          jjtree.closeNodeScope(jjtn009, true);
                                                          jjtn009.jjtSetLastToken(getToken(0));
                                                        }
      }
      break;
    case ANDASSIGN:
                                                                                       ASTAndAssign jjtn010 = new ASTAndAssign(JJTANDASSIGN);
                                                                                       boolean jjtc010 = true;
                                                                                       jjtree.openNodeScope(jjtn010);
                                                                                       jjtn010.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(ANDASSIGN);
      } finally {
                                                                                       if (jjtc010) {
                                                                                         jjtree.closeNodeScope(jjtn010, true);
                                                                                         jjtn010.jjtSetLastToken(getToken(0));
                                                                                       }
      }
      break;
    case XORASSIGN:
                                                                                                         ASTXorAssign jjtn011 = new ASTXorAssign(JJTXORASSIGN);
                                                                                                         boolean jjtc011 = true;
                                                                                                         jjtree.openNodeScope(jjtn011);
                                                                                                         jjtn011.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(XORASSIGN);
      } finally {
                                                                                                         if (jjtc011) {
                                                                                                           jjtree.closeNodeScope(jjtn011, true);
                                                                                                           jjtn011.jjtSetLastToken(getToken(0));
                                                                                                         }
      }
      break;
    case ORASSIGN:
                                                                                                                           ASTOrAssign jjtn012 = new ASTOrAssign(JJTORASSIGN);
                                                                                                                           boolean jjtc012 = true;
                                                                                                                           jjtree.openNodeScope(jjtn012);
                                                                                                                           jjtn012.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(ORASSIGN);
      } finally {
                                                                                                                           if (jjtc012) {
                                                                                                                             jjtree.closeNodeScope(jjtn012, true);
                                                                                                                             jjtn012.jjtSetLastToken(getToken(0));
                                                                                                                           }
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ConditionalExpression() throws ParseException {
    ConditionalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      jj_consume_token(HOOK);
      Expression();
      jj_consume_token(COLON);
                                                     ASTConditionalExpressionNode jjtn001 = new ASTConditionalExpressionNode(JJTCONDITIONALEXPRESSIONNODE);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
                                                     jjtn001.jjtSetFirstToken(getToken(1));
      try {
        ConditionalExpression();
      } catch (Throwable jjte001) {
                                                     if (jjtc001) {
                                                       jjtree.clearNodeScope(jjtn001);
                                                       jjtc001 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte001 instanceof ParseException) {
                                                       {if (true) throw (ParseException)jjte001;}
                                                     }
                                                     if (jjte001 instanceof ParseException) {
                                                       {if (true) throw (ParseException)jjte001;}
                                                     }
                                                     {if (true) throw (Error)jjte001;}
      } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001,  3);
                                                       jjtn001.jjtSetLastToken(getToken(0));
                                                     }
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

  final public void ConditionalOrExpression() throws ParseException {
    ConditionalAndExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
      jj_consume_token(SC_OR);
                                      ASTOrNode jjtn001 = new ASTOrNode(JJTORNODE);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        ConditionalAndExpression();
      } catch (Throwable jjte001) {
                                      if (jjtc001) {
                                        jjtree.clearNodeScope(jjtn001);
                                        jjtc001 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte001 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte001;}
                                      }
                                      if (jjte001 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte001;}
                                      }
                                      {if (true) throw (Error)jjte001;}
      } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                        jjtn001.jjtSetLastToken(getToken(0));
                                      }
      }
    }
  }

  final public void ConditionalAndExpression() throws ParseException {
    InclusiveOrExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_8;
      }
      jj_consume_token(SC_AND);
                                   ASTAndNode jjtn001 = new ASTAndNode(JJTANDNODE);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
                                   jjtn001.jjtSetFirstToken(getToken(1));
      try {
        InclusiveOrExpression();
      } catch (Throwable jjte001) {
                                   if (jjtc001) {
                                     jjtree.clearNodeScope(jjtn001);
                                     jjtc001 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte001 instanceof ParseException) {
                                     {if (true) throw (ParseException)jjte001;}
                                   }
                                   if (jjte001 instanceof ParseException) {
                                     {if (true) throw (ParseException)jjte001;}
                                   }
                                   {if (true) throw (Error)jjte001;}
      } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  2);
                                     jjtn001.jjtSetLastToken(getToken(0));
                                   }
      }
    }
  }

  final public void InclusiveOrExpression() throws ParseException {
    ExclusiveOrExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_9;
      }
      jj_consume_token(BIT_OR);
                                  ASTInclusiveOrNode jjtn001 = new ASTInclusiveOrNode(JJTINCLUSIVEORNODE);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                  jjtn001.jjtSetFirstToken(getToken(1));
      try {
        ExclusiveOrExpression();
      } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte001;}
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte001;}
                                  }
                                  {if (true) throw (Error)jjte001;}
      } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                    jjtn001.jjtSetLastToken(getToken(0));
                                  }
      }
    }
  }

  final public void ExclusiveOrExpression() throws ParseException {
    AndExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_10;
      }
      jj_consume_token(XOR);
                          ASTExclusiveOrNode jjtn001 = new ASTExclusiveOrNode(JJTEXCLUSIVEORNODE);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                          jjtn001.jjtSetFirstToken(getToken(1));
      try {
        AndExpression();
      } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte001;}
                          }
                          if (jjte001 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte001;}
                          }
                          {if (true) throw (Error)jjte001;}
      } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                            jjtn001.jjtSetLastToken(getToken(0));
                          }
      }
    }
  }

  final public void AndExpression() throws ParseException {
    EqualityExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_11;
      }
      jj_consume_token(BIT_AND);
                               ASTBitAndNode jjtn001 = new ASTBitAndNode(JJTBITANDNODE);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                               jjtn001.jjtSetFirstToken(getToken(1));
      try {
        EqualityExpression();
      } catch (Throwable jjte001) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte001 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte001;}
                               }
                               if (jjte001 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte001;}
                               }
                               {if (true) throw (Error)jjte001;}
      } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  2);
                                 jjtn001.jjtSetLastToken(getToken(0));
                               }
      }
    }
  }

  final public void EqualityExpression() throws ParseException {
    InstanceOfExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
                               ASTEquals jjtn001 = new ASTEquals(JJTEQUALS);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                               jjtn001.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(EQ);
        } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001, true);
                                 jjtn001.jjtSetLastToken(getToken(0));
                               }
        }
        break;
      case NE:
                                              ASTNotEquals jjtn002 = new ASTNotEquals(JJTNOTEQUALS);
                                              boolean jjtc002 = true;
                                              jjtree.openNodeScope(jjtn002);
                                              jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(NE);
        } finally {
                                              if (jjtc002) {
                                                jjtree.closeNodeScope(jjtn002, true);
                                                jjtn002.jjtSetLastToken(getToken(0));
                                              }
        }
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                               ASTEqualityNode jjtn003 = new ASTEqualityNode(JJTEQUALITYNODE);
                                                               boolean jjtc003 = true;
                                                               jjtree.openNodeScope(jjtn003);
                                                               jjtn003.jjtSetFirstToken(getToken(1));
      try {
        InstanceOfExpression();
      } catch (Throwable jjte003) {
                                                               if (jjtc003) {
                                                                 jjtree.clearNodeScope(jjtn003);
                                                                 jjtc003 = false;
                                                               } else {
                                                                 jjtree.popNode();
                                                               }
                                                               if (jjte003 instanceof ParseException) {
                                                                 {if (true) throw (ParseException)jjte003;}
                                                               }
                                                               if (jjte003 instanceof ParseException) {
                                                                 {if (true) throw (ParseException)jjte003;}
                                                               }
                                                               {if (true) throw (Error)jjte003;}
      } finally {
                                                               if (jjtc003) {
                                                                 jjtree.closeNodeScope(jjtn003,  3);
                                                                 jjtn003.jjtSetLastToken(getToken(0));
                                                               }
      }
    }
  }

  final public void InstanceOfExpression() throws ParseException {
    EqualsExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
      jj_consume_token(INSTANCEOF);
                                      ASTInstanceOfNode jjtn001 = new ASTInstanceOfNode(JJTINSTANCEOFNODE);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        Type();
      } catch (Throwable jjte001) {
                                      if (jjtc001) {
                                        jjtree.clearNodeScope(jjtn001);
                                        jjtc001 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte001 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte001;}
                                      }
                                      if (jjte001 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte001;}
                                      }
                                      {if (true) throw (Error)jjte001;}
      } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                        jjtn001.jjtSetLastToken(getToken(0));
                                      }
      }
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
  }

  final public void EqualsExpression() throws ParseException {
    RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      jj_consume_token(EQUALS);
                                     ASTEqualsNode jjtn001 = new ASTEqualsNode(JJTEQUALSNODE);
                                     boolean jjtc001 = true;
                                     jjtree.openNodeScope(jjtn001);
                                     jjtn001.jjtSetFirstToken(getToken(1));
      try {
        RelationalExpression();
      } catch (Throwable jjte001) {
                                     if (jjtc001) {
                                       jjtree.clearNodeScope(jjtn001);
                                       jjtc001 = false;
                                     } else {
                                       jjtree.popNode();
                                     }
                                     if (jjte001 instanceof ParseException) {
                                       {if (true) throw (ParseException)jjte001;}
                                     }
                                     if (jjte001 instanceof ParseException) {
                                       {if (true) throw (ParseException)jjte001;}
                                     }
                                     {if (true) throw (Error)jjte001;}
      } finally {
                                     if (jjtc001) {
                                       jjtree.closeNodeScope(jjtn001,  2);
                                       jjtn001.jjtSetLastToken(getToken(0));
                                     }
      }
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
  }

  final public void RelationalExpression() throws ParseException {
    ShiftExpression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
                          ASTLess jjtn001 = new ASTLess(JJTLESS);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                          jjtn001.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(LT);
        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                            jjtn001.jjtSetLastToken(getToken(0));
                          }
        }
        break;
      case GT:
                                      ASTGreater jjtn002 = new ASTGreater(JJTGREATER);
                                      boolean jjtc002 = true;
                                      jjtree.openNodeScope(jjtn002);
                                      jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(GT);
        } finally {
                                      if (jjtc002) {
                                        jjtree.closeNodeScope(jjtn002, true);
                                        jjtn002.jjtSetLastToken(getToken(0));
                                      }
        }
        break;
      case LE:
                                                     ASTLessEqual jjtn003 = new ASTLessEqual(JJTLESSEQUAL);
                                                     boolean jjtc003 = true;
                                                     jjtree.openNodeScope(jjtn003);
                                                     jjtn003.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(LE);
        } finally {
                                                     if (jjtc003) {
                                                       jjtree.closeNodeScope(jjtn003, true);
                                                       jjtn003.jjtSetLastToken(getToken(0));
                                                     }
        }
        break;
      case GE:
                                                                       ASTGreaterEqual jjtn004 = new ASTGreaterEqual(JJTGREATEREQUAL);
                                                                       boolean jjtc004 = true;
                                                                       jjtree.openNodeScope(jjtn004);
                                                                       jjtn004.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(GE);
        } finally {
                                                                       if (jjtc004) {
                                                                         jjtree.closeNodeScope(jjtn004, true);
                                                                         jjtn004.jjtSetLastToken(getToken(0));
                                                                       }
        }
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                            ASTRelationalNode jjtn005 = new ASTRelationalNode(JJTRELATIONALNODE);
                                                                                            boolean jjtc005 = true;
                                                                                            jjtree.openNodeScope(jjtn005);
                                                                                            jjtn005.jjtSetFirstToken(getToken(1));
      try {
        ShiftExpression();
      } catch (Throwable jjte005) {
                                                                                            if (jjtc005) {
                                                                                              jjtree.clearNodeScope(jjtn005);
                                                                                              jjtc005 = false;
                                                                                            } else {
                                                                                              jjtree.popNode();
                                                                                            }
                                                                                            if (jjte005 instanceof ParseException) {
                                                                                              {if (true) throw (ParseException)jjte005;}
                                                                                            }
                                                                                            if (jjte005 instanceof ParseException) {
                                                                                              {if (true) throw (ParseException)jjte005;}
                                                                                            }
                                                                                            {if (true) throw (Error)jjte005;}
      } finally {
                                                                                            if (jjtc005) {
                                                                                              jjtree.closeNodeScope(jjtn005,  3);
                                                                                              jjtn005.jjtSetLastToken(getToken(0));
                                                                                            }
      }
    }
  }

  final public void ShiftExpression() throws ParseException {
    AdditiveExpression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
      case RSIGNEDSHIFT:
      case RUNSIGNEDSHIFT:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
                             ASTLShift jjtn001 = new ASTLShift(JJTLSHIFT);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                             jjtn001.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(LSHIFT);
        } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001, true);
                               jjtn001.jjtSetLastToken(getToken(0));
                             }
        }
        break;
      case RSIGNEDSHIFT:
                                            ASTRShift jjtn002 = new ASTRShift(JJTRSHIFT);
                                            boolean jjtc002 = true;
                                            jjtree.openNodeScope(jjtn002);
                                            jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(RSIGNEDSHIFT);
        } finally {
                                            if (jjtc002) {
                                              jjtree.closeNodeScope(jjtn002, true);
                                              jjtn002.jjtSetLastToken(getToken(0));
                                            }
        }
        break;
      case RUNSIGNEDSHIFT:
                                                           ASTRUShift jjtn003 = new ASTRUShift(JJTRUSHIFT);
                                                           boolean jjtc003 = true;
                                                           jjtree.openNodeScope(jjtn003);
                                                           jjtn003.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(RUNSIGNEDSHIFT);
        } finally {
                                                           if (jjtc003) {
                                                             jjtree.closeNodeScope(jjtn003, true);
                                                             jjtn003.jjtSetLastToken(getToken(0));
                                                           }
        }
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                           ASTShiftNode jjtn004 = new ASTShiftNode(JJTSHIFTNODE);
                                                                           boolean jjtc004 = true;
                                                                           jjtree.openNodeScope(jjtn004);
                                                                           jjtn004.jjtSetFirstToken(getToken(1));
      try {
        AdditiveExpression();
      } catch (Throwable jjte004) {
                                                                           if (jjtc004) {
                                                                             jjtree.clearNodeScope(jjtn004);
                                                                             jjtc004 = false;
                                                                           } else {
                                                                             jjtree.popNode();
                                                                           }
                                                                           if (jjte004 instanceof ParseException) {
                                                                             {if (true) throw (ParseException)jjte004;}
                                                                           }
                                                                           if (jjte004 instanceof ParseException) {
                                                                             {if (true) throw (ParseException)jjte004;}
                                                                           }
                                                                           {if (true) throw (Error)jjte004;}
      } finally {
                                                                           if (jjtc004) {
                                                                             jjtree.closeNodeScope(jjtn004,  3);
                                                                             jjtn004.jjtSetLastToken(getToken(0));
                                                                           }
      }
    }
  }

  final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
                                   ASTPlus jjtn001 = new ASTPlus(JJTPLUS);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
                                   jjtn001.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(PLUS);
        } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001, true);
                                     jjtn001.jjtSetLastToken(getToken(0));
                                   }
        }
        break;
      case MINUS:
                                               ASTMinus jjtn002 = new ASTMinus(JJTMINUS);
                                               boolean jjtc002 = true;
                                               jjtree.openNodeScope(jjtn002);
                                               jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(MINUS);
        } finally {
                                               if (jjtc002) {
                                                 jjtree.closeNodeScope(jjtn002, true);
                                                 jjtn002.jjtSetLastToken(getToken(0));
                                               }
        }
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                            ASTAdditiveNode jjtn003 = new ASTAdditiveNode(JJTADDITIVENODE);
                                                            boolean jjtc003 = true;
                                                            jjtree.openNodeScope(jjtn003);
                                                            jjtn003.jjtSetFirstToken(getToken(1));
      try {
        MultiplicativeExpression();
      } catch (Throwable jjte003) {
                                                            if (jjtc003) {
                                                              jjtree.clearNodeScope(jjtn003);
                                                              jjtc003 = false;
                                                            } else {
                                                              jjtree.popNode();
                                                            }
                                                            if (jjte003 instanceof ParseException) {
                                                              {if (true) throw (ParseException)jjte003;}
                                                            }
                                                            if (jjte003 instanceof ParseException) {
                                                              {if (true) throw (ParseException)jjte003;}
                                                            }
                                                            {if (true) throw (Error)jjte003;}
      } finally {
                                                            if (jjtc003) {
                                                              jjtree.closeNodeScope(jjtn003,  3);
                                                              jjtn003.jjtSetLastToken(getToken(0));
                                                            }
      }
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    UnaryExpression();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_16;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
                          ASTMul jjtn001 = new ASTMul(JJTMUL);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                          jjtn001.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(STAR);
        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                            jjtn001.jjtSetLastToken(getToken(0));
                          }
        }
        break;
      case SLASH:
                                     ASTDiv jjtn002 = new ASTDiv(JJTDIV);
                                     boolean jjtc002 = true;
                                     jjtree.openNodeScope(jjtn002);
                                     jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(SLASH);
        } finally {
                                     if (jjtc002) {
                                       jjtree.closeNodeScope(jjtn002, true);
                                       jjtn002.jjtSetLastToken(getToken(0));
                                     }
        }
        break;
      case REM:
                                                ASTRem jjtn003 = new ASTRem(JJTREM);
                                                boolean jjtc003 = true;
                                                jjtree.openNodeScope(jjtn003);
                                                jjtn003.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(REM);
        } finally {
                                                if (jjtc003) {
                                                  jjtree.closeNodeScope(jjtn003, true);
                                                  jjtn003.jjtSetLastToken(getToken(0));
                                                }
        }
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                           ASTMultiplicativeNode jjtn004 = new ASTMultiplicativeNode(JJTMULTIPLICATIVENODE);
                                                           boolean jjtc004 = true;
                                                           jjtree.openNodeScope(jjtn004);
                                                           jjtn004.jjtSetFirstToken(getToken(1));
      try {
        UnaryExpression();
      } catch (Throwable jjte004) {
                                                           if (jjtc004) {
                                                             jjtree.clearNodeScope(jjtn004);
                                                             jjtc004 = false;
                                                           } else {
                                                             jjtree.popNode();
                                                           }
                                                           if (jjte004 instanceof ParseException) {
                                                             {if (true) throw (ParseException)jjte004;}
                                                           }
                                                           if (jjte004 instanceof ParseException) {
                                                             {if (true) throw (ParseException)jjte004;}
                                                           }
                                                           {if (true) throw (Error)jjte004;}
      } finally {
                                                           if (jjtc004) {
                                                             jjtree.closeNodeScope(jjtn004,  3);
                                                             jjtn004.jjtSetLastToken(getToken(0));
                                                           }
      }
    }
  }

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      UnaryExpression();
      break;
    case MINUS:
      UnaryMinus();
      break;
    default:
      jj_la1[34] = jj_gen;
      if (jj_2_4(2)) {
        PreIncrementExpression();
      } else if (jj_2_5(2)) {
        PreDecrementExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case BANG:
        case TILDE:
        case FALSE:
        case NEW:
        case NULL:
        case TRUE:
        case IDENTIFIER:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          UnaryExpressionNotPlusMinus();
          break;
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void UnaryMinus() throws ParseException {
 /*@bgen(jjtree) UnaryMinus */
  ASTUnaryMinus jjtn000 = new ASTUnaryMinus(JJTUNARYMINUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(MINUS);
      UnaryExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PreIncrementExpression() throws ParseException {
 /*@bgen(jjtree) PreIncrementExpression */
  ASTPreIncrementExpression jjtn000 = new ASTPreIncrementExpression(JJTPREINCREMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(INCR);
      PrimaryExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PreDecrementExpression() throws ParseException {
 /*@bgen(jjtree) PreDecrementExpression */
  ASTPreDecrementExpression jjtn000 = new ASTPreDecrementExpression(JJTPREDECREMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(DECR);
      PrimaryExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void UnaryExpressionNotPlusMinus() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TILDE:
       ASTTilda jjtn001 = new ASTTilda(JJTTILDA);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(TILDE);
        } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtn001.jjtSetLastToken(getToken(0));
       }
        }
        break;
      case BANG:
                    ASTNot jjtn002 = new ASTNot(JJTNOT);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(BANG);
        } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                      jjtn002.jjtSetLastToken(getToken(0));
                    }
        }
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                               ASTNotNode jjtn003 = new ASTNotNode(JJTNOTNODE);
                               boolean jjtc003 = true;
                               jjtree.openNodeScope(jjtn003);
                               jjtn003.jjtSetFirstToken(getToken(1));
      try {
        UnaryExpression();
      } catch (Throwable jjte003) {
                               if (jjtc003) {
                                 jjtree.clearNodeScope(jjtn003);
                                 jjtc003 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte003 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte003;}
                               }
                               if (jjte003 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte003;}
                               }
                               {if (true) throw (Error)jjte003;}
      } finally {
                               if (jjtc003) {
                                 jjtree.closeNodeScope(jjtn003,  2);
                                 jjtn003.jjtSetLastToken(getToken(0));
                               }
      }
      break;
    default:
      jj_la1[37] = jj_gen;
      if (jj_2_6(2147483647)) {
        CastExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case FALSE:
        case NEW:
        case NULL:
        case TRUE:
        case IDENTIFIER:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          PostfixExpression();
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
  final public void CastLookahead() throws ParseException {
 /*@bgen(jjtree) CastLookahead */
  ASTCastLookahead jjtn000 = new ASTCastLookahead(JJTCASTLOOKAHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_7(2)) {
        jj_consume_token(LPAREN);
        PrimitiveType();
      } else if (jj_2_8(2147483647)) {
        jj_consume_token(LPAREN);
        ComplexId();
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      } else if (jj_2_9(2147483647)) {
        jj_consume_token(LPAREN);
        ComplexId();
        jj_consume_token(RPAREN);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PostfixExpression() throws ParseException {
    ElementAccessExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
                                 ASTPostfixNode jjtn003 = new ASTPostfixNode(JJTPOSTFIXNODE);
                                 boolean jjtc003 = true;
                                 jjtree.openNodeScope(jjtn003);
                                 jjtn003.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCR:
                                  ASTPlusPlus jjtn001 = new ASTPlusPlus(JJTPLUSPLUS);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                  jjtn001.jjtSetFirstToken(getToken(1));
          try {
            jj_consume_token(INCR);
          } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001, true);
                                    jjtn001.jjtSetLastToken(getToken(0));
                                  }
          }
          break;
        case DECR:
                                                   ASTMinusMinus jjtn002 = new ASTMinusMinus(JJTMINUSMINUS);
                                                   boolean jjtc002 = true;
                                                   jjtree.openNodeScope(jjtn002);
                                                   jjtn002.jjtSetFirstToken(getToken(1));
          try {
            jj_consume_token(DECR);
          } finally {
                                                   if (jjtc002) {
                                                     jjtree.closeNodeScope(jjtn002, true);
                                                     jjtn002.jjtSetLastToken(getToken(0));
                                                   }
          }
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
                                 if (jjtc003) {
                                   jjtree.closeNodeScope(jjtn003,  2);
                                   jjtn003.jjtSetLastToken(getToken(0));
                                 }
      }
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
  }

  final public void ElementAccessExpression() throws ParseException {
    MemberAccessExpression();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_17;
      }
      jj_consume_token(LBRACKET);
      Expression();
                                                ASTElementAccessNode jjtn001 = new ASTElementAccessNode(JJTELEMENTACCESSNODE);
                                                boolean jjtc001 = true;
                                                jjtree.openNodeScope(jjtn001);
                                                jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(RBRACKET);
      } finally {
                                                if (jjtc001) {
                                                  jjtree.closeNodeScope(jjtn001,  2);
                                                  jjtn001.jjtSetLastToken(getToken(0));
                                                }
      }
    }
  }

  final public void MemberAccessExpression() throws ParseException {
    PrimaryExpression();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_18;
      }
      jj_consume_token(DOT);
          ASTMemberAccessNode jjtn001 = new ASTMemberAccessNode(JJTMEMBERACCESSNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
      try {
        PrimaryExpression();
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
            jjtn001.jjtSetLastToken(getToken(0));
          }
      }
    }
  }

  final public void CastExpression() throws ParseException {
 /*@bgen(jjtree) CastExpression */
  ASTCastExpression jjtn000 = new ASTCastExpression(JJTCASTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LPAREN);
      Type();
      jj_consume_token(RPAREN);
      UnaryExpression();
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
    }
  }

  final public void PrimaryExpression() throws ParseException {
    PrimaryPrefix();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
       ASTCallNode jjtn001 = new ASTCallNode(JJTCALLNODE);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
      try {
        Arguments();
      } catch (Throwable jjte001) {
       if (jjtc001) {
         jjtree.clearNodeScope(jjtn001);
         jjtc001 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte001 instanceof ParseException) {
         {if (true) throw (ParseException)jjte001;}
       }
       if (jjte001 instanceof ParseException) {
         {if (true) throw (ParseException)jjte001;}
       }
       {if (true) throw (Error)jjte001;}
      } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001,  2);
         jjtn001.jjtSetLastToken(getToken(0));
       }
      }
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
  }

  final public void PrimaryPrefix() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      Literal();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      break;
    case NEW:
      AllocationExpression();
      break;
    case IDENTIFIER:
      SingleId();
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Literal() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                        ASTIntLiteral jjtn001 = new ASTIntLiteral(JJTINTLITERAL);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                        jjtn001.jjtSetFirstToken(getToken(1));
      try {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtc001 = false;
                        jjtn001.jjtSetLastToken(getToken(0));
                       jjtn001.str = t.image;
      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001, true);
                          jjtn001.jjtSetLastToken(getToken(0));
                        }
      }
      break;
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
                               ASTFloatLiteral jjtn002 = new ASTFloatLiteral(JJTFLOATLITERAL);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
                               jjtn002.jjtSetFirstToken(getToken(1));
      try {
                               jjtree.closeNodeScope(jjtn002, true);
                               jjtc002 = false;
                               jjtn002.jjtSetLastToken(getToken(0));
                              jjtn002.str = t.image;
      } finally {
                               if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002, true);
                                 jjtn002.jjtSetLastToken(getToken(0));
                               }
      }
      break;
    case CHARACTER_LITERAL:
      t = jj_consume_token(CHARACTER_LITERAL);
                          ASTCharLiteral jjtn003 = new ASTCharLiteral(JJTCHARLITERAL);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
                          jjtn003.jjtSetFirstToken(getToken(1));
      try {
                          jjtree.closeNodeScope(jjtn003, true);
                          jjtc003 = false;
                          jjtn003.jjtSetLastToken(getToken(0));
                         jjtn003.str = t.image;
      } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003, true);
                            jjtn003.jjtSetLastToken(getToken(0));
                          }
      }
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                       ASTStringLiteral jjtn004 = new ASTStringLiteral(JJTSTRINGLITERAL);
                       boolean jjtc004 = true;
                       jjtree.openNodeScope(jjtn004);
                       jjtn004.jjtSetFirstToken(getToken(1));
      try {
                       jjtree.closeNodeScope(jjtn004, true);
                       jjtc004 = false;
                       jjtn004.jjtSetLastToken(getToken(0));
                      jjtn004.str = t.image;
      } finally {
                       if (jjtc004) {
                         jjtree.closeNodeScope(jjtn004, true);
                         jjtn004.jjtSetLastToken(getToken(0));
                       }
      }
      break;
    case FALSE:
    case TRUE:
      BooleanLiteral();
      break;
    case NULL:
    ASTNull jjtn005 = new ASTNull(JJTNULL);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
    jjtn005.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(NULL);
      } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
      jjtn005.jjtSetLastToken(getToken(0));
    }
      }
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BooleanLiteral() throws ParseException {
 /*@bgen(jjtree) BooleanLiteral */
  ASTBooleanLiteral jjtn000 = new ASTBooleanLiteral(JJTBOOLEANLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
    ASTTrue jjtn001 = new ASTTrue(JJTTRUE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(TRUE);
        } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtn001.jjtSetLastToken(getToken(0));
    }
        }
        break;
      case FALSE:
    ASTFalse jjtn002 = new ASTFalse(JJTFALSE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtn002.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(FALSE);
        } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      jjtn002.jjtSetLastToken(getToken(0));
    }
        }
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void Arguments() throws ParseException {
 /*@bgen(jjtree) Arguments */
  ASTArguments jjtn000 = new ASTArguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case FALSE:
      case NEW:
      case NULL:
      case TRUE:
      case IDENTIFIER:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
        ArgumentList();
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ArgumentList() throws ParseException {
    Expression();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[48] = jj_gen;
        break label_19;
      }
      jj_consume_token(COMMA);
      Expression();
    }
  }

  final public void AllocationExpression() throws ParseException {
    if (jj_2_10(2)) {
      jj_consume_token(NEW);
      PrimitiveType();
                          ASTNewArray jjtn001 = new ASTNewArray(JJTNEWARRAY);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                          jjtn001.jjtSetFirstToken(getToken(1));
      try {
        ArrayDimsAndInits();
      } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte001;}
                          }
                          if (jjte001 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte001;}
                          }
                          {if (true) throw (Error)jjte001;}
      } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                            jjtn001.jjtSetLastToken(getToken(0));
                          }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        jj_consume_token(NEW);
        ComplexId();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
        ASTNewArray jjtn002 = new ASTNewArray(JJTNEWARRAY);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        jjtn002.jjtSetFirstToken(getToken(1));
          try {
            ArrayDimsAndInits();
          } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        if (jjte002 instanceof ParseException) {
          {if (true) throw (ParseException)jjte002;}
        }
        {if (true) throw (Error)jjte002;}
          } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  2);
          jjtn002.jjtSetLastToken(getToken(0));
        }
          }
          break;
        case LPAREN:
        ASTConstructor jjtn003 = new ASTConstructor(JJTCONSTRUCTOR);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        jjtn003.jjtSetFirstToken(getToken(1));
          try {
            Arguments();
          } catch (Throwable jjte003) {
        if (jjtc003) {
          jjtree.clearNodeScope(jjtn003);
          jjtc003 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte003 instanceof ParseException) {
          {if (true) throw (ParseException)jjte003;}
        }
        if (jjte003 instanceof ParseException) {
          {if (true) throw (ParseException)jjte003;}
        }
        {if (true) throw (Error)jjte003;}
          } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003,  2);
          jjtn003.jjtSetLastToken(getToken(0));
        }
          }
          break;
        default:
          jj_la1[49] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
 * The second LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
  final public void ArrayDimsAndInits() throws ParseException {
 /*@bgen(jjtree) ArrayDimsAndInits */
  ASTArrayDimsAndInits jjtn000 = new ASTArrayDimsAndInits(JJTARRAYDIMSANDINITS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_20:
      while (true) {
        jj_consume_token(LBRACKET);
        Expression();
                                    jjtn000.num++;
        jj_consume_token(RBRACKET);
        if (jj_2_11(2)) {
          ;
        } else {
          break label_20;
        }
      }
      label_21:
      while (true) {
        if (jj_2_12(2)) {
          ;
        } else {
          break label_21;
        }
        jj_consume_token(LBRACKET);
                                                                                 jjtn000.num++;
        jj_consume_token(RBRACKET);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      Block();
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case FALSE:
    case NEW:
    case NULL:
    case TRUE:
    case IDENTIFIER:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      StatementExpression();
      jj_consume_token(SEMICOLON);
      break;
    case IF:
      IfStatement();
      break;
    case WHILE:
      WhileStatement();
      break;
    case DO:
      DoStatement();
      break;
    case FOR:
      ForStatement();
      break;
    case BREAK:
      BreakStatement();
      break;
    case CONTINUE:
      ContinueStatement();
      break;
    case RETURN:
      ReturnStatement();
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Block() throws ParseException {
 /*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LBRACE);
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case RETURN:
        case SHORT:
        case STRING:
        case TRUE:
        case WHILE:
        case IDENTIFIER:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          ;
          break;
        default:
          jj_la1[52] = jj_gen;
          break label_22;
        }
        BlockStatement();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void BlockStatement() throws ParseException {
    if (jj_2_13(2147483647)) {
      FieldDeclaration();
      jj_consume_token(SEMICOLON);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case BREAK:
      case CONTINUE:
      case DO:
      case FALSE:
      case FOR:
      case IF:
      case NEW:
      case NULL:
      case RETURN:
      case TRUE:
      case WHILE:
      case IDENTIFIER:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
        Statement();
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void StatementExpression() throws ParseException {
 /*@bgen(jjtree) StatementExpression */
  ASTStatementExpression jjtn000 = new ASTStatementExpression(JJTSTATEMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_14(3)) {
        PreIncrementExpression();
      } else if (jj_2_15(3)) {
        PreDecrementExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
        case FALSE:
        case NEW:
        case NULL:
        case TRUE:
        case IDENTIFIER:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          AssignmentExpression();
          break;
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void AssignmentExpression() throws ParseException {
    ConditionalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
    case PLUSASSIGN:
    case MINUSASSIGN:
    case STARASSIGN:
    case SLASHASSIGN:
    case ANDASSIGN:
    case ORASSIGN:
    case XORASSIGN:
    case REMASSIGN:
    case LSHIFTASSIGN:
    case RSIGNEDSHIFTASSIGN:
    case RUNSIGNEDSHIFTASSIGN:
      AssignmentOperator();
                            ASTAssignNode jjtn001 = new ASTAssignNode(JJTASSIGNNODE);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                            jjtn001.jjtSetFirstToken(getToken(1));
      try {
        Expression();
      } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte001;}
                            }
                            if (jjte001 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte001;}
                            }
                            {if (true) throw (Error)jjte001;}
      } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  3);
                              jjtn001.jjtSetLastToken(getToken(0));
                            }
      }
      break;
    default:
      jj_la1[55] = jj_gen;
      ;
    }
  }

  final public void IfStatement() throws ParseException {
 /*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        Statement();
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void WhileStatement() throws ParseException {
 /*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Statement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void DoStatement() throws ParseException {
 /*@bgen(jjtree) DoStatement */
  ASTDoStatement jjtn000 = new ASTDoStatement(JJTDOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(DO);
      Statement();
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ForStatement() throws ParseException {
 /*@bgen(jjtree) ForStatement */
  ASTForStatement jjtn000 = new ASTForStatement(JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(FOR);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case STRING:
      case TRUE:
      case IDENTIFIER:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
        ForInit();
                         jjtn000.num |= 1;
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case FALSE:
      case NEW:
      case NULL:
      case TRUE:
      case IDENTIFIER:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
        Expression();
                                                                  jjtn000.num |= 2;
        break;
      default:
        jj_la1[58] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case FALSE:
      case NEW:
      case NULL:
      case TRUE:
      case IDENTIFIER:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
        ForUpdate();
                                                                                                          jjtn000.num |= 4;
        break;
      default:
        jj_la1[59] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      Statement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ForInit() throws ParseException {
    if (jj_2_16(2147483647)) {
      FieldDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case FALSE:
      case NEW:
      case NULL:
      case TRUE:
      case IDENTIFIER:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
        StatementExpressionList();
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void StatementExpressionList() throws ParseException {
 /*@bgen(jjtree) StatementExpressionList */
  ASTStatementExpressionList jjtn000 = new ASTStatementExpressionList(JJTSTATEMENTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      StatementExpression();
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[61] = jj_gen;
          break label_23;
        }
        jj_consume_token(COMMA);
        StatementExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ForUpdate() throws ParseException {
    StatementExpressionList();
  }

  final public void BreakStatement() throws ParseException {
 /*@bgen(jjtree) BreakStatement */
  ASTBreakStatement jjtn000 = new ASTBreakStatement(JJTBREAKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(BREAK);
      jj_consume_token(SEMICOLON);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ContinueStatement() throws ParseException {
 /*@bgen(jjtree) ContinueStatement */
  ASTContinueStatement jjtn000 = new ASTContinueStatement(JJTCONTINUESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CONTINUE);
      jj_consume_token(SEMICOLON);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ReturnStatement() throws ParseException {
 /*@bgen(jjtree) ReturnStatement */
  ASTReturnStatement jjtn000 = new ASTReturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case FALSE:
      case NEW:
      case NULL:
      case TRUE:
      case IDENTIFIER:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
        Expression();
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_3R_56() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_33()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_55()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_31()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_31()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_31()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_33()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    }
    return false;
  }

  private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_53()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public Jcc2ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[63];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x8000,0x0,0x400,0x400,0x0,0x40000,0x100000,0x1802800,0x1802800,0x40000,0x40000,0x0,0x100000,0x100000,0x2000000,0x80000000,0x0,0x0,0x0,0x0,0x48000000,0x48000000,0x0,0x0,0x30600000,0x30600000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1800800,0x1800000,0x1800000,0x800,0x0,0x0,0x8000,0x80000,0x800,0x800,0x0,0x0,0x1800800,0x40000,0x8800,0x0,0x1822800,0x1822800,0x1822800,0x1800800,0x100000,0x0,0x1800800,0x1800800,0x1800800,0x1800800,0x40000,0x1800800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x2a000000,0x2a000000,0x0,0x2a000000,0x2a000000,0x0,0x2a000000,0x0,0x0,0x1e,0x1e,0x0,0x0,0x2a000000,0x1ffc000,0x1ffc000,0x0,0x0,0x1,0x100,0x200,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x3800,0x3800,0x18,0x18,0x460,0x460,0x18,0x0,0x0,0x0,0x0,0x6,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x1e,0x0,0x0,0x0,0x4400001e,0x6e00001e,0x4400001e,0x1e,0x1ffc000,0x0,0x2a00001e,0x1e,0x1e,0x1e,0x0,0x1e,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x96312,0x86312,0x0,0x6312,0x96312,0x0,0x86312,0x0,0x0,0x34488c08,0x34488c08,0x0,0x0,0x86312,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x34488c08,0x0,0x0,0x34488c08,0x0,0x0,0x0,0x0,0x0,0x34488c08,0x34408808,0x8008,0x34488c08,0x0,0x0,0x400,0x344a9c69,0x344aff7b,0x344a9c69,0x34488c08,0x0,0x4,0x3448ef1a,0x34488c08,0x34488c08,0x34488c08,0x0,0x34488c08,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[16];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Jcc2Parser(java.io.InputStream stream) throws ParseException {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Jcc2Parser(java.io.InputStream stream, String encoding) throws ParseException {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new ParseException(e.toString()); }
    token_source = new Jcc2ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 63; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) throws ParseException {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) throws ParseException {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new ParseException(e.toString()); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 63; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Jcc2Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Jcc2ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 63; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 63; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Jcc2Parser(Jcc2ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 63; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(Jcc2ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 63; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private jcc2.parser.j2me.ArrayList jj_expentries = new jcc2.parser.j2me.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (jcc2.parser.j2me.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[94];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 63; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 94; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 16; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
